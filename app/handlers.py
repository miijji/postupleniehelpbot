
from aiogram import F, Router, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import pandas as pd
#import app.keyboards as kb
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                            InlineKeyboardMarkup, InlineKeyboardButton, 
                            )

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder



router = Router()



class Form(StatesGroup):
    choose_subjects_count = State()
    choose_subjects_combo = State()
    input_scores = State()
    choosing_university = State()

#–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ excel
def load_universities(file_path):
    df = pd.read_excel(file_path)
    universities = {}

    for _, row in df.iterrows():
        university_name = row["–í–£–ó"]
        direction_name = row["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]
        program_description = row['–û–ø–∏—Å–∞–Ω–∏–µ']

        if university_name not in universities:
            universities[university_name] = {}

        if direction_name not in universities[university_name]:
            universities[university_name][direction_name] = []

        program = {
            "description": program_description,
            "total_score": int(row["–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª"])\
                  if pd.notna(row["–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª"]) else 0,
            "dvi_required": row["–¢—Ä–µ–±—É–µ—Ç—Å—è –î–í–ò"],
            "dvi_min_score": int(row["–ú–∏–Ω. –±–∞–ª–ª –î–í–ò"])\
                  if pd.notna(row["–ú–∏–Ω. –±–∞–ª–ª –î–í–ò"]) else 0,
            "optional": [],
            "math": None,
            "rus": None,
            "fiz": None,
            "inf": None
        }

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if pd.notna(row.get("–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", "")) and\
              row["–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"] != "-":
            program["optional"] = []
            if "physics" in str(row["–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"]).split(", "):  
                program["optional"] = ["fiz", "inf"]
        

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π
        subject_mapping = {
            "Math": "math",
            "Russian": "rus",
            "Physics": "fiz",
            "Computer_science": "inf"
        }

        for col_name, key in subject_mapping.items():
            if pd.notna(row.get(col_name, "")) and row[col_name] != "-":
                program[key] = int(row[col_name])

        universities[university_name][direction_name].append(program)

    return universities
UNIVERSITIES = load_universities(r'app\–ö–Ω–∏–≥–∞1n.xlsx')



SUBJECT_COMBINATIONS = {
    3: [
        {"name": "–†–£–°+–ú–ê–¢+–ò–ù–§", "subjects": ["rus", "math", "inf"]},
        {"name": "–†–£–°+–ú–ê–¢+–§–ò–ó", "subjects": ["rus", "math", "fiz"]}
    ],
    4: [  
        {"name": "–†–£–°+–ú–ê–¢+–ò–ù–§+–§–ò–ó", "subjects": \
         ["rus", "math", "inf", "fiz"]}
    ]
}




@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="3 –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="count_3"),
        types.InlineKeyboardButton(text="4 –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="count_4")
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç—ã —Å–¥–∞–µ—à—å?",\
                          reply_markup=builder.as_markup())
    await state.set_state(Form.choose_subjects_count)

@router.callback_query(Form.choose_subjects_count, F.data.startswith("count_"))
async def process_count(callback: types.CallbackQuery, state: FSMContext):
    count = int(callback.data.split("_")[1])
    await state.update_data(subjects_count=count)
    
    builder = InlineKeyboardBuilder()
    combinations = SUBJECT_COMBINATIONS.get(count, [])
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    for combo in combinations:
        builder.add(types.InlineKeyboardButton(
            text=combo["name"],
            callback_data=f"combo_{'_'.join(combo['subjects'])}"  
        ))
    
    builder.adjust(1)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.choose_subjects_combo)
    await callback.answer()

@router.callback_query(Form.choose_subjects_combo, F.data.startswith("combo_"))
async def process_combo(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ callback_data
    _, *subjects = callback.data.split("_")  
    await state.update_data(
        subjects=subjects,
        current_subject=0
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    data = await state.get_data()
    first_subject = data["subjects"][0]
    await callback.message.answer(f"–í–≤–µ–¥–∏ –±–∞–ª–ª –ø–æ {name_komu_chemu(first_subject)}:")
    await state.set_state(Form.input_scores)
    await callback.answer()


@router.message(Form.input_scores)
async def process_score(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if not validate_score(message.text):
        return await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
    
    current_idx = data["current_subject"]
    subjects = data["subjects"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–ª
    scores = data.get("scores", {})
    scores[subjects[current_idx]] = int(message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if current_idx + 1 < len(subjects):
        await state.update_data(
            scores=scores,
            current_subject=current_idx + 1
        )
        next_subject = subjects[current_idx + 1]
        await message.answer(f"–í–≤–µ–¥–∏ –±–∞–ª–ª –ø–æ {name_komu_chemu(next_subject)}:")
    else:
        await state.update_data(scores=scores)
        await show_final_results(message, state)


def validate_score(score: str) -> bool:
    try:
        return 0 <= int(score) <= 100
    except ValueError:
        return False

def name_komu_chemu(code: str) -> str:
    names = {
        "rus": "—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É",
        "math": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ", 
        "inf": "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ",
        "fiz": "—Ñ–∏–∑–∏–∫–µ"
    }
    return names.get(code, "–ø—Ä–µ–¥–º–µ—Ç—É")

def name_kto_chto(code: str) -> str:
    names = {
        "rus": "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "math": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 
        "inf": "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "fiz": "—Ñ–∏–∑–∏–∫–∞"
    }
    return names.get(code, "–ø—Ä–µ–¥–º–µ—Ç")



async def show_final_results(message: types.Message, state: FSMContext):
    data = await state.get_data()
    scores = data["scores"]
    result = [
        "‚úÖ –¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
        *[f"‚Ä¢ {name_kto_chto(subj).capitalize()}: {score}" 
          for subj, score in scores.items()],
        f"\nüßÆ –°—É–º–º–∞ –±–∞–ª–ª–æ–≤: {sum(scores.values())}",
        "\nüè´ –í—ã–±–µ—Ä–∏ –≤—É–∑:",
        "/hse - –ù–ò–£ –í–®–≠",
        "/msu - –ú–ì–£",
        "/mipt - –ú–§–¢–ò",
        "/bmstu - –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞",
        "/mephi - –ù–ò–Ø–£ –ú–ò–§–ò"
    ]
    
    await message.answer("\n".join(result))
    
    
    await state.set_state(Form.choosing_university)










@router.message(Command("hse"))
async def show_hse_programs(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_scores = data.get("scores", {})
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤
        rus = user_scores.get("rus", 0)
        math = user_scores.get("math", 0)
        fiz = user_scores.get("fiz", 0)
        inf = user_scores.get("inf", 0)
        
        response = ["üìö –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ù–ò–£ –í–®–≠:"]
        has_programs = False
        
        target_university = "–í–®–≠"
        if target_university not in UNIVERSITIES:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –í–®–≠ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        for direction, programs in UNIVERSITIES[target_university].items():
            direction_programs = []
            
            for program in programs:
                meets_requirements = True
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
                if program["optional"]:
                    # –°–ª—É—á–∞–π —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                    total_score = rus + math + max(fiz, inf)
                elif program["fiz"] is None or program["inf"] is None:
                    # –°–ª—É—á–∞–π —Å –ø—Ä–æ—á–µ—Ä–∫–æ–º –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    total_score = rus + math\
                          + (fiz if program["inf"] is None else inf)
                else:
                    # –û–±—â–∏–π —Å–ª—É—á–∞–π (4 –ø—Ä–µ–¥–º–µ—Ç–∞)
                    total_score = rus + math + fiz + inf
                
                score_diff = program["total_score"] - total_score
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                required_checks = [
                    ("math", program["math"]),
                    ("rus", program["rus"]),
                    ("fiz", program["fiz"]),
                    ("inf", program["inf"])
                ]
                
                for subject, min_score in required_checks:
                    if min_score is not None and\
                          user_scores.get(subject, 0) < min_score:
                        meets_requirements = False
                        break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                if program["optional"]:
                    elective_passed = any(
                        user_scores.get(subj, 0) >= program.get(subj, 0)
                        for subj in program["optional"]
                    )
                    if not elective_passed:
                        meets_requirements = False

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞
                if meets_requirements and\
                      total_score + 10 < program["total_score"]:
                    meets_requirements = False
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                if meets_requirements:
                    min_scores = [
                        f"{name}: {program[subj]}" 
                        for subj, name in [
                            ("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), 
                            ("rus", "–†—É—Å—Å–∫–∏–π"),
                            ("fiz", "–§–∏–∑–∏–∫–∞"),
                            ("inf", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                        ] 
                        if program[subj] is not None
                    ]
                    
                    program_info = [
                        f"üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['description']}",
                        f"‚îú –ú–∏–Ω–∏–º—É–º: {', '.join(min_scores)}",
                        f"‚îú –¢–≤–æ–π —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total_score}",
                    ]

                    if total_score >= program["total_score"]:
                        program_info.extend([
                            f"‚îú –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {program['total_score']}",
                            "‚îú ‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è!",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    else:
                        program_info.extend([
                            f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ~{score_diff} –±–∞–ª–ª–æ–≤",
                            "‚îú –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    
                    direction_programs.append("\n".join(program_info))
                    has_programs = True
            
            if direction_programs:
                response.append(f"\nüîπ {direction}:")
                response.extend(direction_programs)
                
        await message.answer("\n".join(response) if\
                              has_programs else "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {e}")






@router.message(Command("mipt"))
async def show_mipt_programs(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_scores = data.get("scores", {})
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤
        rus = user_scores.get("rus", 0)
        math = user_scores.get("math", 0)
        fiz = user_scores.get("fiz", 0)
        inf = user_scores.get("inf", 0)
        
        response = ["üìö –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ú–§–¢–ò:"]
        has_programs = False
        
        target_university = "–ú–§–¢–ò"
        if target_university not in UNIVERSITIES:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –ú–§–¢–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        for direction, programs in UNIVERSITIES[target_university].items():
            direction_programs = []
            
            for program in programs:
                meets_requirements = True
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
                if program["optional"]:
                    # –°–ª—É—á–∞–π —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                    total_score = rus + math + max(fiz, inf)
                elif program["fiz"] is None or program["inf"] is None:
                    # –°–ª—É—á–∞–π —Å –ø—Ä–æ—á–µ—Ä–∫–æ–º –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    total_score = rus + math +\
                          (fiz if program["inf"] is None else inf)
                else:
                    # –û–±—â–∏–π —Å–ª—É—á–∞–π (4 –ø—Ä–µ–¥–º–µ—Ç–∞)
                    total_score = rus + math + fiz + inf
                
                score_diff = program["total_score"] - total_score
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                required_checks = [
                    ("math", program["math"]),
                    ("rus", program["rus"]),
                    ("fiz", program["fiz"]),
                    ("inf", program["inf"])
                ]
                
                for subject, min_score in required_checks:
                    if min_score is not None and\
                          user_scores.get(subject, 0) < min_score:
                        meets_requirements = False
                        break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                if program["optional"]:
                    elective_passed = any(
                        user_scores.get(subj, 0) >= program.get(subj, 0)
                        for subj in program["optional"]
                    )
                    if not elective_passed:
                        meets_requirements = False

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞
                if meets_requirements and total_score\
                      + 10 < program["total_score"]:
                    meets_requirements = False
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                if meets_requirements:
                    min_scores = [
                        f"{name}: {program[subj]}" 
                        for subj, name in [
                            ("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), 
                            ("rus", "–†—É—Å—Å–∫–∏–π"),
                            ("fiz", "–§–∏–∑–∏–∫–∞"),
                            ("inf", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                        ] 
                        if program[subj] is not None
                    ]
                    
                    program_info = [
                        f"üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['description']}",
                        f"‚îú –ú–∏–Ω–∏–º—É–º: {', '.join(min_scores)}",
                        f"‚îú –¢–≤–æ–π —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total_score}",
                    ]

                    if total_score >= program["total_score"]:
                        program_info.extend([
                            f"‚îú –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {program['total_score']}",
                            "‚îú ‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è!",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    else:
                        program_info.extend([
                            f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ~{score_diff} –±–∞–ª–ª–æ–≤",
                            "‚îú –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    
                    direction_programs.append("\n".join(program_info))
                    has_programs = True
            
            if direction_programs:
                response.append(f"\nüîπ {direction}:")
                response.extend(direction_programs)
                
        await message.answer("\n".join(response) if\
                              has_programs else "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {e}")





@router.message(Command("msu"))
async def show_msu_programs(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_scores = data.get("scores", {})
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤
        rus = user_scores.get("rus", 0)
        math = user_scores.get("math", 0)
        fiz = user_scores.get("fiz", 0)
        inf = user_scores.get("inf", 0)
        
        response = ["üìö –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ú–ì–£:"]
        has_programs = False
        
        target_university = "–ú–ì–£"
        if target_university not in UNIVERSITIES:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –ú–ì–£ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        DVI_THRESHOLD = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –±–∞–ª–ª–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –î–í–ò
            
        for direction, programs in UNIVERSITIES[target_university].items():
            direction_programs = []
            
            for program in programs:
                meets_requirements = True
                is_near = False

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
                if program["optional"]:
                    total_score = rus + math + max(fiz, inf)
                elif program["fiz"] is None or program["inf"] is None:
                    total_score = rus + \
                        math + (fiz if program["inf"] is None else inf)
                else:
                    total_score = rus + math + fiz + inf
                
                score_diff = program["total_score"] - total_score

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                required_checks = [
                    ("math", program["math"]),
                    ("rus", program["rus"]),
                    ("fiz", program["fiz"]),
                    ("inf", program["inf"])
                ]
                
                for subject, min_score in required_checks:
                    if min_score is not None and\
                          user_scores.get(subject, 0) < min_score:
                        meets_requirements = False
                        break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                if program["optional"]:
                    elective_passed = any(
                        user_scores.get(subj, 0) >= program.get(subj, 0)
                        for subj in program["optional"]
                    )
                    if not elective_passed:
                        meets_requirements = False

                # –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –î–í–ò
                if program["dvi_required"] == "–¥–∞":
                    if meets_requirements and\
                          (0 < score_diff <= DVI_THRESHOLD):
                        is_near = True
                    elif total_score < program["total_score"] - DVI_THRESHOLD:
                        meets_requirements = False
                else:
                    if meets_requirements and \
                        total_score < program["total_score"]:
                        meets_requirements = False

                if meets_requirements:
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
                    min_scores = [
                        f"{name}: {program[subj]}" 
                        for subj, name in [
                            ("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), 
                            ("rus", "–†—É—Å—Å–∫–∏–π"),
                            ("fiz", "–§–∏–∑–∏–∫–∞"),
                            ("inf", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                        ] 
                        if program[subj] is not None
                    ]
                    
                    program_info = [
                        f"üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['description']}",
                        f"‚îú –ú–∏–Ω–∏–º—É–º: {', '.join(min_scores)}",
                        f"‚îú –¢–≤–æ–π —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total_score}",
                    ]

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –î–í–ò
                    if is_near:
                        program_info.extend([
                            f"‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ —Å –î–í–ò! (–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {score_diff} –±–∞–ª–ª–æ–≤)",
                            f"‚îî –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –î–í–ò: {program['dvi_min_score']}"
                        ])
                    else:
                        program_info.append(
                            f"‚îî –î–í–ò: {'‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è' if program['dvi_required'] == '–¥–∞' else '‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        )
                    
                    direction_programs.append("\n".join(program_info))
                    has_programs = True
            
            if direction_programs:
                response.append(f"\nüîπ {direction}:")
                response.extend(direction_programs)
        
        await message.answer("\n".join(response)\
                              if has_programs else "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {e}")


@router.message(Command("bmstu"))
async def show_bmstu_programs(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_scores = data.get("scores", {})
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤
        rus = user_scores.get("rus", 0)
        math = user_scores.get("math", 0)
        fiz = user_scores.get("fiz", 0)
        inf = user_scores.get("inf", 0)
        
        response = ["üìö –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞:"]
        has_programs = False
        
        target_university = "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞"
        if target_university not in UNIVERSITIES:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        for direction, programs in UNIVERSITIES[target_university].items():
            direction_programs = []
            
            for program in programs:
                meets_requirements = True
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
                if program["optional"]:
                    # –°–ª—É—á–∞–π —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                    total_score = rus + math + max(fiz, inf)
                elif program["fiz"] is None or program["inf"] is None:
                    # –°–ª—É—á–∞–π —Å –ø—Ä–æ—á–µ—Ä–∫–æ–º –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    total_score = rus + math\
                          + (fiz if program["inf"] is None else inf)
                else:
                    # –û–±—â–∏–π —Å–ª—É—á–∞–π (4 –ø—Ä–µ–¥–º–µ—Ç–∞)
                    total_score = rus + math + fiz + inf
                
                score_diff = program["total_score"] - total_score
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                required_checks = [
                    ("math", program["math"]),
                    ("rus", program["rus"]),
                    ("fiz", program["fiz"]),
                    ("inf", program["inf"])
                ]
                
                for subject, min_score in required_checks:
                    if min_score is not None and \
                        user_scores.get(subject, 0) < min_score:
                        meets_requirements = False
                        break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                if program["optional"]:
                    elective_passed = any(
                        user_scores.get(subj, 0) >= program.get(subj, 0)
                        for subj in program["optional"]
                    )
                    if not elective_passed:
                        meets_requirements = False

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞
                if meets_requirements and total_score\
                      + 10 < program["total_score"]:
                    meets_requirements = False
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                if meets_requirements:
                    min_scores = [
                        f"{name}: {program[subj]}" 
                        for subj, name in [
                            ("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), 
                            ("rus", "–†—É—Å—Å–∫–∏–π"),
                            ("fiz", "–§–∏–∑–∏–∫–∞"),
                            ("inf", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                        ] 
                        if program[subj] is not None
                    ]
                    
                    program_info = [
                        f"üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['description']}",
                        f"‚îú –ú–∏–Ω–∏–º—É–º: {', '.join(min_scores)}",
                        f"‚îú –¢–≤–æ–π —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total_score}",
                    ]

                    if total_score >= program["total_score"]:
                        program_info.extend([
                            f"‚îú –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {program['total_score']}",
                            "‚îú ‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è!",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    else:
                        program_info.extend([
                            f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ~{score_diff} –±–∞–ª–ª–æ–≤",
                            "‚îú –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    
                    direction_programs.append("\n".join(program_info))
                    has_programs = True
            
            if direction_programs:
                response.append(f"\nüîπ {direction}:")
                response.extend(direction_programs)
                
        await message.answer("\n".join(response) if\
                              has_programs else "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {e}")



@router.message(Command("mephi"))
async def show_mephi_programs(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_scores = data.get("scores", {})
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤
        rus = user_scores.get("rus", 0)
        math = user_scores.get("math", 0)
        fiz = user_scores.get("fiz", 0)
        inf = user_scores.get("inf", 0)
        
        response = ["üìö –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ù–ò–Ø–£ –ú–ò–§–ò:"]
        has_programs = False
        
        target_university = "–ù–ò–Ø–£ –ú–ò–§–ò"
        if target_university not in UNIVERSITIES:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –ù–ò–Ø–£ –ú–ò–§–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        for direction, programs in UNIVERSITIES[target_university].items():
            direction_programs = []
            
            for program in programs:
                meets_requirements = True
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
                if program["optional"]:
                    # –°–ª—É—á–∞–π —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                    total_score = rus + math + max(fiz, inf)
                elif program["fiz"] is None or program["inf"] is None:
                    # –°–ª—É—á–∞–π —Å –ø—Ä–æ—á–µ—Ä–∫–æ–º –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    total_score = rus + math + (fiz if program["inf"] \
                                                is None else inf)
                else:
                    # –û–±—â–∏–π —Å–ª—É—á–∞–π (4 –ø—Ä–µ–¥–º–µ—Ç–∞)
                    total_score = rus + math + fiz + inf
                
                score_diff = program["total_score"] - total_score
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                required_checks = [
                    ("math", program["math"]),
                    ("rus", program["rus"]),
                    ("fiz", program["fiz"]),
                    ("inf", program["inf"])
                ]
                
                for subject, min_score in required_checks:
                    if min_score is not None and\
                          user_scores.get(subject, 0) < min_score:
                        meets_requirements = False
                        break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                if program["optional"]:
                    elective_passed = any(
                        user_scores.get(subj, 0) >= program.get(subj, 0)
                        for subj in program["optional"]
                    )
                    if not elective_passed:
                        meets_requirements = False

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞
                if meets_requirements and total_score + 10\
                      < program["total_score"]:
                    meets_requirements = False
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                if meets_requirements:
                    min_scores = [
                        f"{name}: {program[subj]}" 
                        for subj, name in [
                            ("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), 
                            ("rus", "–†—É—Å—Å–∫–∏–π"),
                            ("fiz", "–§–∏–∑–∏–∫–∞"),
                            ("inf", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                        ] 
                        if program[subj] is not None
                    ]
                    
                    program_info = [
                        f"üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['description']}",
                        f"‚îú –ú–∏–Ω–∏–º—É–º: {', '.join(min_scores)}",
                        f"‚îú –¢–≤–æ–π —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total_score}",
                    ]

                    if total_score >= program["total_score"]:
                        program_info.extend([
                            f"‚îú –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {program['total_score']}",
                            "‚îú ‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è!",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    else:
                        program_info.extend([
                            f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ~{score_diff} –±–∞–ª–ª–æ–≤",
                            "‚îú –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                            f"‚îî –î–í–ò: {'‚úÖ' if program['dvi_required'] == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
                        ])
                    
                    direction_programs.append("\n".join(program_info))
                    has_programs = True
            
            if direction_programs:
                response.append(f"\nüîπ {direction}:")
                response.extend(direction_programs)
                
        await message.answer("\n".join(response) if has_programs else "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {e}")

